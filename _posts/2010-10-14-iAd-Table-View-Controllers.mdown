---
title: Use iAd in a Table View Controller
---


<div class="authors">
  <div class="author">Author: Yoshi</div>
  <div class="editor">Editor: Jeff Verkoeyen</div>
</div>

Adding iAd to Your Three20 Application
======================================

### Adapted from the <a href="http://groups.google.com/group/three20/web/recipe-adding-iad-to-your-three20-application">Three20 Google Group</a>

This is for adding iAd to a ^TTTableViewController^ (also works with
^TTThumbsViewController^, which is a subclass).  This isn't really Three20-specific,
so this approach should work for pretty much any type of view controller.

The way I approached the display of iAds was that I would always hide it initially,
and have it only appear when the iAd server comes back with a successful response.
You don't have to do it this way, but I found it to be the most reliable without
disrupting the overall display of the UI.

In the sample the iAds appear at the bottom of the table view.

--
[View the code for this article on GitHub](http://github.com/Three20/Samples/tree/master/iAdSample/)
--

### The Final Product

<div class="image" markdown=1>![The Final Product](/gfx/samples/iad1.png 320x480)</div>

### The Source

Three20+Additions imports the additions for every module of Three20. Three20UI
in particular provides a number of helpful view methods in
`Three20UI/UIViewAdditions.h` that we use in this file to simplify the code.

    #import <Three20/Three20+Additions.h>

Once the ad is loaded, we animate it into the bottom of the table view frame. This
is how long that animation will take.

    static const NSTimeInterval kBannerSlideInAnimationDuration = 0.4;

    @implementation AdTableViewController

    - (void)dealloc {
      _adView.delegate = nil;
      TT_RELEASE_SAFELY(_adView);

      [super dealloc];
    }

    #pragma mark -
    #pragma mark UIViewController

    - (void)viewDidLoad {
      [super viewDidLoad];

      _adView = [[ADBannerView alloc] initWithFrame:CGRectZero];

Keep the ad view flush to the bottom of the screen on orientation changes. We'll
still need to manually set the table view frame size, though.

      _adView.autoresizingMask = UIViewAutoresizingFlexibleTopMargin | UIViewAutoresizingFlexibleWidth;

      _adView.requiredContentSizeIdentifiers = [NSSet setWithObjects:
                                                ADBannerContentSizeIdentifier320x50,
                                                ADBannerContentSizeIdentifier480x32,
                                                nil];
      _adView.currentContentSizeIdentifier = ADBannerContentSizeIdentifier320x50;

      _adView.delegate = self;

This uses the `top` and `bottom` UIView additions found in
`Three20UI/UIViewAdditions.h`. Much easier than
`self.view.frame.origin.y + etc...`.

      _adView.top = self.view.bottom;

      [self.view addSubview:_adView];
    }

viewDidUnload is called on a didReceiveMemoryWarning call. We need to
ensure that we unload the ad view when we receive a memory warning,
otherwise we'll leak the object on viewDidLoad when the controller's view is
inevitably loaded into memory again.

    - (void)viewDidUnload {
      [super viewDidUnload];

      _adView.delegate = nil;
      TT_RELEASE_SAFELY(_adView);

      _bannerIsVisible = NO;
    }

This utility method ensures that the table view is taking up the correct amount
of screen real estate.

    - (void)updateViewFramesWithOrientation:(UIInterfaceOrientation)orientation {
      if (UIInterfaceOrientationIsLandscape(orientation)) {
        _adView.currentContentSizeIdentifier = ADBannerContentSizeIdentifier480x32;

      } else {
        _adView.currentContentSizeIdentifier = ADBannerContentSizeIdentifier320x50;
      }

      CGRect tableFrame = self.tableView.frame;
      tableFrame.size.height = self.view.height - (_bannerIsVisible ? _adView.height : 0);
      self.tableView.frame = tableFrame;
    }

    - (void)viewWillAppear:(BOOL)animated {
      [super viewWillAppear:animated];

      [self updateViewFramesWithOrientation:self.interfaceOrientation];
    }

    - (void)willRotateToInterfaceOrientation: (UIInterfaceOrientation)toInterfaceOrientation
                                    duration: (NSTimeInterval)duration {
      [self updateViewFramesWithOrientation:toInterfaceOrientation];
    }

    - (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation {
      return YES;
    }

Your own model logic somewhere in here...

The Ad View delegate methods are found below. In summary, when we successfully
load an advertisement, we animate the ad view into position and set the
`_bannerIsVisible` flag to `YES`.

    #pragma mark -
    #pragma mark AdViewBannerDelegate

    - (void)bannerViewDidLoadAd:(ADBannerView *)banner {
      if (!_bannerIsVisible) {
        CGRect tableFrame = self.tableView.frame;

        [UIView beginAnimations:@"showBanner" context:NULL];
        {
          [UIView setAnimationDuration:kBannerSlideInAnimationDuration];

          _adView.bottom = self.tableView.bottom;

          // Shrink the tableview to create space for banner
          tableFrame.size.height = self.view.height - _adView.height;
          self.tableView.frame = tableFrame;

          _bannerIsVisible = YES;
        }
        [UIView commitAnimations];
      }
    }

    - (void)bannerView:(ADBannerView *)banner didFailToReceiveAdWithError:(NSError *)error {
      if (_bannerIsVisible) {
        CGRect tableFrame = self.tableView.frame;
        tableFrame.size.height = self.view.height;

        self.tableView.frame = tableFrame;
        _adView.top = self.tableView.bottom;

        _bannerIsVisible = NO;
      }
    }

    @end

### The Final Product

<div class="image" markdown=1>![The Final Product](/gfx/samples/iad1.png 320x480)</div>
